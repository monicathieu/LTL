function LTL_RunUnivariate(par, analysis, flags)
% function wholeshebang(subpar, flags)
% runs an entire subject start to finish.
%
% subpar refers to either the subject number (in string notation) or
% the par struct generated by par = par_params(subject)
%
% flags defaults to all stages, or individual stages can be chosen from:
% m = makevols
% a = make anatomicals
% s = slice timing
% l = realignment
% c = coregister inplane anat to mean func, and hires to inplane
% g = segment and normalize gray matter
% n = normalize functionals
% h = smooth functionals
% k = make specmask
% z = make artifact indices
% o = make and move onsets
% r = make mvpa regressors
% v = make mvpa regressors
% p = specify model
% e = run model
% t = make contrasts
%
% M = mail .ps file to yourself
% 
% modified from older version by jbh on 7/23/08
% modified from version by amg on 5/15/14 
% NOTE: many of the linked functions are not yet set up!!!!!

origdir = pwd;

task = 'lab';
if ~exist('analysis', 'var')
    fprintf('\n\n***WARNING: Assuming analysis: ''analysisByPerf_noPhase!***\n\n');
    analysis = 'analysisByPerf_noPhase';
end

if ~exist('flags', 'var')
    fprintf('\n\n***WARNING: Assuming default flags: doing everything!***\n\n');
    pause(10); % built-in bailout time for if you really didn't want to take the default option
    flags = 'maslcgnhkorpetM';
end

if length(par) > 1
    for i =1:length(par)
        LTL_RunUnivariate(par(i),analysis,flags)
    end
    return
end
    

if ~isstruct(par) % if it is par_params struct
    par = LT_Params(par ,task,1);
end



% %set up logdir if it doesn't exist (for saving par to, etc)
% if ~exist(par.logdir, 'dir'); mkdir(par.logdir); end
% %save par file so that you know what you did!
% parfile = [par.logdir filesep ['par-' date '.mat']];
% save(parfile, 'par');

% Preprocessing

% if ismember('u',flags); PM_unzip(par); end
% 
% if ismember('o',flags); PM_preprocess(par); end
% 
% if ismember('x',flags); PM_anatDicomsToNii(par); end
% 
% if ismember('q',flags); PM_copyNiis(par); end
% 
% if ismember('y',flags); PM_reorientNiftis(par); end
% 
% if ismember('c',flags); PM_coregwrapper(par); end
% 
% if ismember('g',flags); PM_segnorm(par); end
% 
% if ismember('n',flags); PM_normfuncs(par); end
% 
% if ismember('h',flags); PM_smoothfuncs(par); end
% 
% if ismember('w',flags); PM_normSPGR(par); end
% 
% if ismember('k',flags); PM_makespec_native(par); end
% 
% if ismember('f',flags); PM_meanFuncs(par); end
% 
% if ismember('j',flags); PM_subUtil(par); end
% 
% if ismember('m',flags); PM_slicetime(par); end
% 
% if ismember('l',flags); PM_realign(par); end
% 
% if ismember('a',flags); PM_ArtScansToOns(par); end
% 
% if ismember('z',flags); reconAllBatch(par); end

% Modeling, etc
    if ismember('r',flags); LT_MakeRegs(par,task, analysis); end
    
%for t = 1:length(par.Tasks)
    if ismember('p',flags); LT_mod_spec(par,analysis); end
    if ismember('e',flags); LT_mod_est(par,analysis); end
    if ismember('t',flags), LT_setcontrasts(par,'lab',analysis,1); end
    
%end

% if ismember('b',flags); PM_EstimateIndividualBetas(par); end

cd(origdir);


% mail out...
if ismember('M',flags)
     try
        pss = dir([par.logdir filesep '*.ps']);
        [psdts, psord] = sortrows(vertcat(pss.datenum));
        psfile = [par.logdir filesep pss(psord(end)).name];
        setpref('Internet','SMTP_Server',par.smtpserv);
        setpref('Internet','E_mail',par.fromaddy);
        sendmail(par.toaddy, [par.substr ' complete'],...
                ['Complete as of ' datestr(now, 0)], {psfile, parfile});
     catch
        fprintf('Mailing failed');
     end
end
fprintf('\n%s done.\n', par.substr);